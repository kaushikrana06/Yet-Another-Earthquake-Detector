package module1;

import processing.core.PApplet;
import de.fhpotsdam.unfolding.UnfoldingMap;
import de.fhpotsdam.unfolding.geo.Location;
import de.fhpotsdam.unfolding.providers.AbstractMapProvider;
//import de.fhpotsdam.unfolding.providers.Google;
import de.fhpotsdam.unfolding.providers.MBTilesMapProvider;
import de.fhpotsdam.unfolding.providers.Microsoft;
//import de.fhpotsdam.unfolding.providers.Microsoft;
import de.fhpotsdam.unfolding.providers.OpenStreetMap;
import de.fhpotsdam.unfolding.utils.MapUtils;


public class HelloWorld extends PApplet
{
	private static final long serialVersionUID = 1L;

	/** This is where to find the local tiles, for working without an Internet connection */
	public static String mbTilesString = "blankLight-1-3.mbtiles";
	
	//  OFFLINE
	private static final boolean offline = false;
	UnfoldingMap map1;
	UnfoldingMap map2;

	public void setup() {
		size(5000, 1000, P2D);		
		
		this.background(220, 200, 210);
		
		// map provider
		AbstractMapProvider provider = new Microsoft.RoadProvider();
		int zoomLevel = 12;
		
		if (offline) {
			// If you are working offline, you need to use this provider 
			// to work with the maps that are local on your computer.  
			provider = new MBTilesMapProvider(mbTilesString);
			// 3 is the maximum zoom level for working offline
			zoomLevel = 2;
		}
		
		// Create a new UnfoldingMap to be displayed in this window.  
		// The 2nd-5th arguments give the map's x, y, width and height
		// When you create your map we want you to play around with these 
		// arguments to get your second map in the right place.
		// The 6th argument specifies the map provider.  
		// There are several providers built-in.
		// Note if you are working offline you must use the MBTilesMapProvider
		map1 = new UnfoldingMap(this, 120, 50, 800, 900, provider);
		map2 = new UnfoldingMap(this, 1000,50, 800, 900, provider);
		
		// The next line zooms in and centers the map at 
	    map1.zoomAndPanTo(zoomLevel, new Location(25.78f, 87.48f));
	    map2.zoomAndPanTo(zoomLevel, new Location(22.82f, 86.22f));
		
		// This line makes the map interactive
		MapUtils.createDefaultEventDispatcher(this, map1);
		MapUtils.createDefaultEventDispatcher(this, map2);
		// TODO: Add code here that creates map2 
		// Then you'll modify draw() below

	}

	/** Draw the Applet window.  */
	public void draw() {
		// So far we only draw map1...
		// TODO: Add code so that both maps are displayed
		map1.draw();
		map2.draw();
	}

	
}
